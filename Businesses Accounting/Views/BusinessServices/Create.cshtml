@model Businesses_Accounting.Models.ViewModels.CreatBusinessServiceViewModel

@{
    ViewData["Title"] = "خدمت جدید";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="g-col-3 g-col-sm-4">

<div class="demo-section">
    <div id="validation-success"></div>
    @(
        Html.Kendo().Form<Businesses_Accounting.Models.ViewModels.CreatBusinessServiceViewModel>()
        .Name("formExample")
        .HtmlAttributes(new { action = "Create", method = "POST" })
        .Validatable(v =>
        {
            v.ValidateOnBlur(false);
            v.ValidationSummary(vs => vs.Enable(false));
        })
        .Items(items =>
        {
            items.AddGroup()
            .Label("خدمت جدید")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {
                i.AddAntiForgeryToken(Html.AntiForgeryToken());
                i.Add().Field(f => f.Id).Label(l => l.Text("Id:")).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.ImageUrl).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.BusinessId).Label(l => l.Text("BusinessId:")).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.Name).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.ProductCode).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.CategoryId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Title").DataValueField("Id").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_BusinessCategories", "Basic").Data("filterBusinessCategories"); }).ServerFiltering(true); }); });

            });
            items.AddGroup()
            //.Label(" مالی")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {

                i.Add().Field(f => f.IsActive).Editor(e => { e.Switch().Messages(c => c.Checked("فعال").Unchecked("غیر فعال")); });

            });
        })//.HtmlAttributes(new {@class="k-columns-2"})
          //  .Events(ev => ev.ValidateField("onFormValidateField").Clear("onFormClear"))
        )
</div>

<script>
    function filterBusinessCategories(e) {
        return kendo.ui.ComboBox.requestData($("#CategoryId"));
    }
    function filterBusinessTypes(e) {
        return kendo.ui.ComboBox.requestData($("#TypeId"));
    }
    function filterCurrency(e) {
        return kendo.ui.ComboBox.requestData($("#MainCurrencyId"));
    }
    function filterCalendarsTypes(e) {
        return kendo.ui.ComboBox.requestData($("#CalendarId"));
    }
    function filterInventoryAccountingSystems(e) {
        return kendo.ui.ComboBox.requestData($("#InventoryAccountingSystem"));
    }
    function onFormValidateField(e) {
        $("#validation-success").html("");
    }
    function onCheckBoxGroupSelect(e) {
        let hItemid = ``;
        let selected = $(e.target[0]).is(":checked");
        let itemval = $(e.target[0]).val();
        switch (itemval) {
            case "1":
                hItemid = `IsCustomer`;
                break;
            case "2":
                hItemid = `IsVendor`;
                break;
            case "3":
                hItemid = `IsStockholder`;
                break;
            case "4":
                hItemid = `Employee`;
                break;
            default:
            // code block
        }
        let el = document.getElementById(hItemid);
        el.value = selected;
    }

    function onFormSubmit(e) {
        e.preventDefault();
        $("#validation-success").html("<div class='k-messagebox k-messagebox-success'>Form data is valid!</div>");
    }

    function onFormClear(e) {
        $("#validation-success").html("");
    }
</script>


<div>
    <a asp-action="Index">Back to List</a>
</div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
