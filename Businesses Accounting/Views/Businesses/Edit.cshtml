@model Businesses_Accounting.Models.ViewModels.CreateBusinessViewModel

@{
    ViewData["Title"] = "ویرایش";
}
<div style=" grid-column-end: span 3; grid-row-end: span 1;"></div>

<div class="demo-section">
    <div id="validation-success"></div>
    @(
        Html.Kendo().Form<Businesses_Accounting.Models.ViewModels.CreateBusinessViewModel>()
            .Name("formExample")
            .HtmlAttributes(new { action = "Create", method = "POST" })
            .Validatable(v =>
            {
                v.ValidateOnBlur(true);
                v.ValidationSummary(vs => vs.Enable(true));
            })
            .Items(items =>
            {
                items.AddGroup()
                .Label("لوگوی کسب و کار")//.Layout("<div class'k-columns-2'>")
                .Items(i =>
                {
                    i.Add().Field(f => f.ImageUrl).Editor(e => e.Hidden());
                    i.Add().Field(f => f.files).Label(l => l.Text(" ")).EditorTemplateHandler("uploadEditor");
            });
            items.AddGroup()
            .Label("ویرایش کسب و کار")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {
                i.AddAntiForgeryToken(Html.AntiForgeryToken());
                i.Add().Field(f => f.Id).Label(l => l.Text("Id:")).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.Name).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.LanguageId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Name").DataValueField("Id").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_GetLanguages", "Basic").Data("filterLanguages"); }).ServerFiltering(true); }); });
                i.Add().Field(f => f.LegalName).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.TypeId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Name").DataValueField("Id").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_GetBusinessTypes", "Basic").Data("filterBusinessTypes"); }).ServerFiltering(true); }); });
            });
            items.AddGroup()
            .Label("تنظیمات مالی")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {

                i.Add().Field(f => f.HasMultiCurrency).Editor(e => { e.Switch().Messages(c => c.Checked("بله").Unchecked("خیر")); });
                i.Add().Field(f => f.HasWarehouseManagement).Editor(e => { e.Switch().Messages(c => c.Checked("بله").Unchecked("خیر")); });

            });
            items.AddGroup().Label(" ")
            .Items(i =>
            {

                i.Add().Field(f => f.MainCurrencyId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Name").DataValueField("Id").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_GetCurrency", "Basic").Data("filterCurrency"); }).ServerFiltering(true); }); });
                i.Add().Field(f => f.CurrenciesIds).Label(l => l.Optional(true)).Editor(e => { e.MultiSelect().AutoClose(false).Placeholder("Please select your favourite sport...").DownArrow(true).NoDataTemplateId("noDataTemplate").DataTextField("Text").Height(520).DataValueField("Value").Filter("contains").DataSource(source => { source.Read(read => { read.Action("Items_GetCurrencies", "Basic").Data("filterCurrencies"); }); }); });
                i.Add().Field(f => f.InventoryAccountingSystem).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Text").DataValueField("Value").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_GetInventoryAccountingSystemTypes", "Basic").Data("filterInventoryAccountingSystems"); }).ServerFiltering(true); }); });
                i.Add().Field(f => f.ValueAddedTaxRate).Editor(e => { e.TextBox().Placeholder("TextBox"); });
            });
            items.AddGroup().Label(" ")
            .Items(i =>
            {
                i.Add().Field(f => f.CalendarId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Text").DataValueField("Value").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_GetCalendars", "Basic").Data("filterCalendarsTypes"); }).ServerFiltering(true); }); });
            });
        })//.HtmlAttributes(new {@class="k-columns-2"})
          //  .Events(ev => ev.ValidateField("onFormValidateField").Clear("onFormClear"))
        )
</div>

<script>
    function uploadEditor(container, options) {

        let ofield = options.field;
        let temphtml = `
                                                            <div id="img${ofield}"><div class='image-logo'><img class="image-logo-img" src="${options.model.ImageUrl}" /></div></div>
                                              <div class="k-upload k-upload-sync k-upload-empty" role="application">
                                              <div class="k-dropzone k-upload-dropzone">
                                              <div class="k-upload-button-wrap">
                                              <div class="k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button" tabindex="0" role="button"><span class="k-button-text">انتخاب</span>
                                              </div>
                                                          <input id="${ofield}" name="${ofield}" type="file"  onchange="onSelect(this)" data-role="upload" aria-label="انتخاب" tabindex="-1" aria-hidden="true" autocomplete="off">
                                              </div>
                                              </div>
                                              </div>
                                                          <script>kendo.syncReady(function(){jQuery("#${ofield}").kendoUpload({"success":onSelect,"dropZone":".dropZoneElement","multiple":false,"showFileList":true,"validation":{"allowedExtensions":[".jpg",".jpeg",".png",".svg",".bmp",".gif"],"minFileSize":1000}});});
                                function onSelect(e) {
                let overimg = false;
                let file;
                for (var i = 0; i < e.files.length; i++) {
                    if (i == 0) {
                        file = e.files[i];

                        if (file) {
                            var reader = new FileReader();

                            reader.onloadend = function () {
                                    $("#img${ofield}").html("<div class='image-logo'><img class='image-logo-img' src=" + this.result + " /></div>");
                            };

                            reader.readAsDataURL(file);

                        }
                    }
                    else {
                        overimg = true;

                    }
                }
                if (overimg) {
                    if (file) {
                      //  e.files = [...file];
                    }
                }
            }

                         <\/script>`;
        $(temphtml).appendTo(container)
        //.kendoUpload();

    }
    function filterLanguages(e) {
        return kendo.ui.ComboBox.requestData($("#LanguageId"));
    }
    function filterBusinessTypes(e) {
        return kendo.ui.ComboBox.requestData($("#TypeId"));
    }
    function filterCurrency(e) {
        return kendo.ui.ComboBox.requestData($("#MainCurrencyId"));
    } 
    function filterCurrencies(e) {
        return kendo.ui.MultiSelect.requestData($("#CurrenciesIds"));
    }
    function filterCalendarsTypes(e) {
        return kendo.ui.ComboBox.requestData($("#CalendarId"));
    }
    function filterInventoryAccountingSystems(e) {
        return kendo.ui.ComboBox.requestData($("#InventoryAccountingSystem"));
    }
    function onFormValidateField(e) {
        $("#validation-success").html("");
    }

    function onFormSubmit(e) {
        e.preventDefault();
        $("#validation-success").html("<div class='k-messagebox k-messagebox-success'>Form data is valid!</div>");
    }

    function onFormClear(e) {
        $("#validation-success").html("");
    }
</script>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        //            <script>
        //                $(document).ready(function () {
        // let els=       document.querySelectorAll(`.k-form-fieldset`);
        //                    for (let i = 0; i < els.length; i++) {
        //                        els[i].className = "k-form-fieldset k-columns-2";
        //                    }
        //                });

        //            </script>
    }
}



