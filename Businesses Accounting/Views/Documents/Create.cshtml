@model Businesses_Accounting.Models.Document

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div style=" grid-column-end: span 3; grid-row-end: span 1;"></div>

@(Html.Kendo().Grid<CreateAccountingJournalViewModel>()
    .Name("Grid")
    .Columns(columns =>
    {
        //columns.Bound(p => p.Id).Filterable(false);
        columns.Bound(p => p.AccountId);
        columns.Bound(p => p.Debit).Width(140);
        @* columns.Bound(p => p.UnitsInStock).Width(140); *@
        @* columns.Bound(p => p.Discontinued).Width(100); *@
        columns.Command(command => command.Destroy());
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
   //.Pageable()
   //.Navigatable()
   //.Sortable()
   .Scrollable()
   //.Events(events => events.Sort("onSort"))
    .DataSource(dataSource => dataSource
        .Ajax()
    //    .Batch(true)
        .PageSize(20)
   //     .ServerOperation(false)
  //      .Events(events => events.Error("error_handler"))
 .Model(m =>
 {
     m.Id(p => p.Id);
     m.Field(f => f.AccountId);
 })
        .Create("Editing_Create", "Documents")
        .Read("Editing_Read", "Documents")
        .Update("Editing_Update", "Documents")
        .Destroy("Editing_Destroy", "Documents")
    ).Events(e => e.Edit("onEdit"))
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    // Prevent sorting when new record without Product Name is added
    function onSort(e) {
        var gridData = e.sender.dataSource.data()
        gridData.forEach(function (element) {
            if (!element.ProductName) {
                e.preventDefault()
            }
        });
    }
</script>


<script>
    var selectedItem;

    function onEdit(e) {
        selectedItem = e.model.EmployeeID;
    }

    function onDataBound(e) {
        if (selectedItem) {
            setTimeout(function () {
                e.sender.value(selectedItem);
                e.sender.trigger('change')
            });
        }
    }
</script>
<div>
    <a asp-action="Index">Back to List</a>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
