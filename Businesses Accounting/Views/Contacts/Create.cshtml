@model Businesses_Accounting.Models.ViewModels.CreateContactViewModel

@{
    ViewData["Title"] = "شخص جدید";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div style=" grid-column-end: span 3; grid-row-end: span 1;"></div>

<div class="demo-section">
    <div id="validation-success"></div>
    @(
        Html.Kendo().Form<Businesses_Accounting.Models.ViewModels.CreateContactViewModel>()
        .Name("formExample")
        .HtmlAttributes(new { action = "Create", method = "POST" })
        .Validatable(v =>
        {
            v.ValidateOnBlur(false);
            v.ValidationSummary(vs => vs.Enable(false));
        })
        .Items(items =>
        {
            items.AddGroup()
            .Label("شخص جدید")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {
                i.AddAntiForgeryToken(Html.AntiForgeryToken());
                i.Add().Field(f => f.Id).Label(l => l.Text("Id:")).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.ImageUrl).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.IsCustomer).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.IsStockholder).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.Employee).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.IsVendor).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.BusinessId).Label(l => l.Text("BusinessId:")).Editor(e => { e.Hidden(); });
                i.Add().Field(f => f.files).Label(l => l.Text(" ")).EditorTemplateHandler("uploadEditor");
                i.Add().Field(f => f.Company).Editor(e => { e.TextBox().HtmlAttributes(new { required = "required" }); });
                i.Add().Field(f => f.TitleC).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.LastName).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.FirstName).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.DisplayName).Editor(e => { e.TextBox(); });
                i.Add().Field(f => f.CategoryId).Editor(e => { e.ComboBox().Filter(FilterType.Contains).MinLength(3).Placeholder("انتخاب کنید...").DataTextField("Title").DataValueField("Id").HtmlAttributes(new { style = "width:100%" }).Height(520).DataSource(source => { source.Read(read => { read.Action("Items_BusinessCategories", "Basic").Data("filterBusinessCategories"); }).ServerFiltering(true); }); });
                i.Add().Field(f => f.Type).Editor(e =>
                {
                    e.CheckBoxGroup().Name("checkboxgroup-second")
            .Layout("horizontal")
            .Value(Model.Type.CheckBoxGroupValue)
            .BindTo(Model.Type.Items).Events(e => e.Select("onCheckBoxGroupSelect"));
                });
            });
            items.AddGroup()
            //.Label(" مالی")//.Layout("<div class'k-columns-2'>")
            .Items(i =>
            {

                i.Add().Field(f => f.IsActive).Editor(e => { e.Switch().Messages(c => c.Checked("فعال").Unchecked("غیر فعال")); });

            });
        })//.HtmlAttributes(new {@class="k-columns-2"})
          //  .Events(ev => ev.ValidateField("onFormValidateField").Clear("onFormClear"))
        )
</div>

<script>
    function uploadEditor(container, options) {
        let ofield = options.field;
        let temphtml = `
                                        <div id="img${ofield}"></div>
                                              <div class="k-upload k-upload-sync k-upload-empty" role="application">
                                              <div class="k-dropzone k-upload-dropzone">
                                              <div class="k-upload-button-wrap">
                                              <div class="k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button" tabindex="0" role="button"><span class="k-button-text">انتخاب</span>
                                              </div>
                                                          <input id="${ofield}" name="${ofield}" type="file"  onchange="onSelect(this)" data-role="upload" aria-label="انتخاب" tabindex="-1" aria-hidden="true" autocomplete="off">
                                              </div>
                                              </div>
                                              </div>
                                                      <script>kendo.syncReady(function(){jQuery("#${ofield}").kendoUpload({"success":onSelect,"dropZone":".dropZoneElement","multiple":false,"showFileList":true,"validation":{"allowedExtensions":[".jpg",".jpeg",".png",".bmp",".gif"],"minFileSize":1000}});});
                                function onSelect(e) {
                let overimg = false;
                let file;
                for (var i = 0; i < e.files.length; i++) {
                    if (i == 0) {
                        file = e.files[i];

                        if (file) {
                            var reader = new FileReader();

                            reader.onloadend = function () {
                                        $("#img${ofield}").html("<div class='image-logo'><img class='image-logo-img' src=" + this.result + " /></div>");
                            };

                            reader.readAsDataURL(file);

                        }
                    }
                    else {
                        overimg = true;

                    }
                }
                if (overimg) {
                    if (file) {
                      //  e.files = [...file];
                    }
                }
            }

                         <\/script>`;
        $(temphtml).appendTo(container)
        //.kendoUpload();

    }


    function filterBusinessCategories(e) {
        return kendo.ui.ComboBox.requestData($("#CategoryId"));
    }
    function filterBusinessTypes(e) {
        return kendo.ui.ComboBox.requestData($("#TypeId"));
    }
    function filterCurrency(e) {
        return kendo.ui.ComboBox.requestData($("#MainCurrencyId"));
    }
    function filterCalendarsTypes(e) {
        return kendo.ui.ComboBox.requestData($("#CalendarId"));
    }
    function filterInventoryAccountingSystems(e) {
        return kendo.ui.ComboBox.requestData($("#InventoryAccountingSystem"));
    }
    function onFormValidateField(e) {
        $("#validation-success").html("");
    }
    function onCheckBoxGroupSelect(e) {
        let hItemid = ``;
        let selected = $(e.target[0]).is(":checked");
        let itemval = $(e.target[0]).val();
            switch (itemval) {
            case "1":
                    hItemid = `IsCustomer`;
                break;
            case "2":
                hItemid = `IsVendor`;
                break;
            case "3":
                hItemid = `IsStockholder`;
                break;
            case "4":
                hItemid = `Employee`;
                break;
            default:
            // code block
        }
        let el = document.getElementById(hItemid);
        el.value = selected;
    }

    function onFormSubmit(e) {
        e.preventDefault();
        $("#validation-success").html("<div class='k-messagebox k-messagebox-success'>Form data is valid!</div>");
    }

    function onFormClear(e) {
        $("#validation-success").html("");
    }
</script>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
